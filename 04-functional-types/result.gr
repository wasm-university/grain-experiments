// Functional Types
import Result from "result"
import Number from "number"
import Float64 from "float64"

//import Option from "option"

let result = Number.div(42.5,0)
if(Number.isInfinite(result)) {
  print("ðŸ˜¡ Division by zero")
}

let a = 42.0d
let b = 0.0d

print(Float64.div(a,b))

let r = Float64.div(a,b)

if(Number.isInfinite(Float64.toNumber(r))) {
  print("ðŸ˜¡ Division by zero")
}




let division = (x, y) => {
  let a = Float64.fromNumber(x)
  let b = Float64.fromNumber(y)
  let r = Float64.toNumber(Float64.div(a,b))

  match(r) {
    r when Number.isInfinite(r) => Err("ðŸ˜¡ Division by zero"),
    _ => Ok(r)
  }
}



match(division(5, 0)) {
  Err(message) => print(message),
  Ok(value) => print(value)
}

match(division(5.5, 0)) {
  Err(message) => print(message),
  Ok(value) => print(value)
}

match(division(84, 2)) {
  Err(message) => print(message),
  Ok(value) => print(value)
}

/*
print(Number.div(84,2))
print(Number.div(84.5,2))

print(Number.div(84.5,0))



print(Number.isInfinite(Number.div(84.5,0)))

print(Number.div(84,0))

print(Number.isNaN(Number.div(84,0)))


//print(Number.div(84,0))
*/

/*
match(division(5.8,0)) {
  Ok(result) => print(result),
  Err(error) => print(error) // DivisionByZero: Division by zero
}

match(division(5,0)) {
  Ok(result) => print(result),
  Err(error) => print(error) // DivisionByZero: Division by zero
}
*/
